{"version":3,"sources":["Calculator/util.js","Calculator/index.js","App.js","serviceWorker.js","index.js"],"names":["brackets","2019","18000","22000","58000","last","2018","14800","19200","86000","2017","13000","17000","80000","2016","12600","17400","39000","2015","12000","2014","11000","16000","70000","2013","10700","15300","68000","2012","10000","15000","63000","2011","9400","13600","57000","2010","8800","13200","74200","2009","28000","usd_try","calculate","wages","calculate_yearly_tax","bracket","wage","year","tax","amount","usd_tax","total_tax","Object","keys","forEach","key","ratio","yearly_usd","total","totalUSD","result","resultUSD","calculate_total_taxes","Calculator","Component","constructor","props","super","handleChange","value","this","setState","state","render","className","reverse","map","minimumValue","currencySymbol","decimalCharacter","digitGroupSeparator","onChange","event","onInvalidPaste","readOnly","App","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d1b992e.chunk.js","sourcesContent":["export const brackets = {\n  2019: {\n    18000: 0.15,\n    22000: 0.2,\n    58000: 0.27,\n    last: 0.35\n  },\n  2018: {\n    14800: 0.15,\n    19200: 0.2,\n    86000: 0.27,\n    last: 0.35\n  },\n  2017: {\n    13000: 0.15,\n    17000: 0.2,\n    80000: 0.27,\n    last: 0.35\n  },\n  2016: {\n    12600: 0.15,\n    17400: 0.2,\n    39000: 0.27,\n    last: 0.35\n  },\n  2015: {\n    12000: 0.15,\n    17000: 0.2,\n    80000: 0.27,\n    last: 0.35\n  },\n  2014: {\n    11000: 0.15,\n    16000: 0.2,\n    70000: 0.27,\n    last: 0.35\n  },\n  2013: {\n    10700: 0.15,\n    15300: 0.2,\n    68000: 0.27,\n    last: 0.35\n  },\n  2012: {\n    10000: 0.15,\n    15000: 0.2,\n    63000: 0.27,\n    last: 0.35\n  },\n  2011: {\n    9400: 0.15,\n    13600: 0.2,\n    57000: 0.27,\n    last: 0.35\n  },\n  2010: {\n    8800: 0.15,\n    13200: 0.2,\n    74200: 0.27,\n    last: 0.35\n  },\n  2009: {\n    8800: 0.15,\n    13200: 0.2,\n    28000: 0.27,\n    last: 0.35\n  }\n};\n\nconst usd_try = {\n  2019: 6.57,\n  2018: 4.84,\n  2017: 3.64,\n  2016: 3.01,\n  2015: 2.72,\n  2014: 2.18,\n  2013: 1.9,\n  2012: 1.79,\n  2011: 1.67,\n  2010: 1.5,\n  2009: 1.54\n};\n\nexport function yearly_usd(year, tax) {\n  return tax / usd_try[year];\n}\n\nexport const calculate = wages => {\n  function calculate_yearly_tax(bracket, wage, year) {\n    let amount = wage;\n    let usd_tax = 0;\n    let total_tax = 0;\n    let tax;\n    Object.keys(bracket).forEach(key => {\n      if (amount > 0) {\n        const ratio = bracket[key];\n        if (key !== \"last\" && amount > key) {\n          tax = key * ratio;\n        } else {\n          tax = amount * ratio;\n        }\n        amount -= key;\n        usd_tax += yearly_usd(year, tax);\n        total_tax += tax;\n      }\n    });\n    return {\n      total_tax,\n      usd_tax\n    };\n  }\n\n  function calculate_total_taxes(brackets, wages) {\n    let total = 0;\n    let totalUSD = 0;\n    Object.keys(wages).forEach(year => {\n      const { total_tax, usd_tax } = calculate_yearly_tax(\n        brackets[year],\n        wages[year],\n        year\n      );\n      total += total_tax;\n      totalUSD += usd_tax;\n    });\n\n    return {\n      result: total,\n      resultUSD: totalUSD\n    };\n  }\n\n  return calculate_total_taxes(brackets, wages);\n};\n","import React, { Component } from \"react\";\nimport ReactNumeric from \"react-numeric\";\nimport { brackets, calculate } from \"./util\";\nimport \"./style.css\";\n\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      wages: {},\n      result: 0,\n      resultUSD: 0\n    };\n  }\n\n  handleChange = (year, value) => {\n    this.setState(\n      {\n        wages: {\n          ...this.state.wages,\n          [year]: value\n        }\n      },\n      () => {\n        const { result, resultUSD } = calculate(this.state.wages);\n        this.setState({\n          result,\n          resultUSD\n        });\n      }\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"Calculator\">\n        <div className=\"data\">\n          <p>\n            4A detaylı hizmet dökümünüzdeki yıllık \"Prime Esas Kazanç (P.E.K)\" değerini\n            girmeniz yeterlidir.\n          </p>\n          <div className=\"wages\">\n            {Object.keys(brackets)\n              .reverse()\n              .map(year => (\n                <div className=\"wage\" key={year}>\n                  <label>\n                    {year}:\n                    <ReactNumeric\n                      className=\"input-numeric\"\n                      value={this.state.wages[year] || \"\"}\n                      minimumValue=\"0\"\n                      currencySymbol=\" ₺\"\n                      decimalCharacter=\",\"\n                      digitGroupSeparator=\".\"\n                      onChange={(event, value) =>\n                        this.handleChange(year, value)\n                      }\n                      onInvalidPaste={\"ignore\"}\n                    />\n                  </label>\n                </div>\n              ))}\n          </div>\n        </div>\n        <div className=\"result\">\n          <div>Bugüne kadar verdiğiniz vergilerin toplamı:</div>\n          <span className=\"price\">\n            <ReactNumeric\n              className=\"priceinput\"\n              readOnly\n              currencySymbol=\" $\"\n              decimalCharacter=\",\"\n              digitGroupSeparator=\".\"\n              value={this.state.resultUSD}\n            />\n          </span>\n          (\n          <ReactNumeric\n            readOnly\n            className=\"priceinput\"\n            currencySymbol=\" ₺\"\n            decimalCharacter=\",\"\n            digitGroupSeparator=\".\"\n            value={this.state.result}\n          />\n          )\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React, { Component } from \"react\";\nimport Calculator from \"./Calculator\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-wrapper\">\n          <header className=\"App-header\">\n            <div className=\"logo\" />\n          </header>\n          <Calculator />\n        </div>\n        <footer>\n          <a\n            href=\"https://github.com/hypeserver/ne-kadar-verdin\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Ne kadar verdin?\n          </a>{\" \"}\n          GitHub üzerinde barındırılan açık kaynaklı bir projedir.\n          Bilgilerinizin asla kaydedilmediğine emin olabilirsiniz.\n        </footer>\n        <div className=\"hashtag\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}