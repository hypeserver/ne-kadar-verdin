{"version":3,"sources":["Calculator/util.js","Calculator/index.js","App.js","serviceWorker.js","index.js"],"names":["brackets","2018","14800","19200","86000","last","2017","13000","17000","80000","2016","12600","17400","39000","2015","12000","2014","11000","16000","70000","2013","10700","15300","68000","2012","10000","15000","63000","2011","9400","13600","57000","2010","8800","13200","74200","2009","28000","calculate","wages","total","Object","keys","forEach","year","yearly_tax","bracket","wage","tax","amount","total_tax","key","ratio","calculate_yearly_tax","calculate_total_taxes","Calculator","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","values","setState","objectSpread","state","defineProperty","floatValue","result","_this2","react_default","a","createElement","className","map","number_format_default","thousandSeparator","prefix","onValueChange","value","displayType","Component","App","src_Calculator","href","target","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f76ed76.chunk.js","sourcesContent":["export const brackets = {\n  2018: {\n    14800: 0.15,\n    19200: 0.2,\n    86000: 0.27,\n    \"last\": 0.35,\n  },\n  2017: {\n    13000: 0.15,\n    17000: 0.2,\n    80000: 0.27,\n    \"last\": 0.35,\n  },\n  2016: {\n    12600: 0.15,\n    17400: 0.2,\n    39000: 0.27,\n    \"last\": 0.35,\n  },\n  2015: {\n    12000: 0.15,\n    17000: 0.2,\n    80000: 0.27,\n    \"last\": 0.35,\n  },\n  2014: {\n    11000: 0.15,\n    16000: 0.2,\n    70000: 0.27,\n    \"last\": 0.35,\n  },\n  2013: {\n    10700: 0.15,\n    15300: 0.2,\n    68000: 0.27,\n    \"last\": 0.35,\n  },\n  2012: {\n    10000: 0.15,\n    15000: 0.2,\n    63000: 0.27,\n    \"last\": 0.35,\n  },\n  2011: {\n    9400: 0.15,\n    13600: 0.2,\n    57000: 0.27,\n    \"last\": 0.35,\n  },\n  2010: {\n    8800: 0.15,\n    13200: 0.2,\n    74200: 0.27,\n    \"last\": 0.35,\n  },\n  2009: {\n    8800: 0.15,\n    13200: 0.2,\n    28000: 0.27,\n    \"last\": 0.35,\n  },\n};\n\nexport const calculate = (wages) => {\n  function calculate_yearly_tax(bracket, wage) {\n    let amount = wage;\n    let total_tax = 0;\n    let tax;\n    Object.keys(bracket).forEach(key => {\n      if (amount > 0) {\n        const ratio = bracket[key];\n        if (key !== \"last\" && amount > key) {\n          tax = key * ratio;\n        }\n        else {\n          tax = amount * ratio;\n        }\n        amount -= key;\n        total_tax += tax;\n      }\n    });\n    return total_tax;\n  }\n  \n  function calculate_total_taxes(brackets, wages) {\n    let total = 0;\n    Object.keys(wages).forEach(year => {\n      const yearly_tax = calculate_yearly_tax(brackets[year], wages[year]);\n      total += yearly_tax;\n    });\n    return total;\n  }\n\n  return calculate_total_taxes(brackets, wages);\n}","import React, { Component } from 'react';\nimport NumberFormat from 'react-number-format';\nimport { brackets, calculate } from './util';\nimport './style.css';\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      wages: {},\n      result: 0,\n    };\n  }\n\n  handleChange = (year, values) => {\n    this.setState({\n      wages: {\n        ...this.state.wages,\n        [year]: values.floatValue,\n      }\n    }, () => {\n      this.setState({\n        result: calculate(this.state.wages)\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"Calculator\">\n        <div className=\"data\">\n          <p>Hizmet dokumunuzdeki yillik odemelerinizi girerek ne kadar vergi verdiginizi hesaplayabilirsiniz.</p>\n          <div className=\"wages\">\n            {Object.keys(brackets).map(year => (\n              <div className=\"wage\" key={year}>\n                <label>\n                  {year}:\n                  <NumberFormat\n                    thousandSeparator={true}\n                    prefix={'₺'}\n                    onValueChange={(values) => this.handleChange(year, values)}\n                    value={this.state.wages[year] || \"\"}\n                  />\n                </label>\n              </div>\n            ))}\n          </div>\n        </div>\n        <div className=\"result\">\n          <span>Bu zamana kadar verdiginiz vergilerin toplami:</span>\n          <NumberFormat\n            displayType={'text'}\n            thousandSeparator={true}\n            prefix={'₺'}\n            value={this.state.result}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React, { Component } from 'react';\nimport Calculator from './Calculator';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-wrapper\">\n          <header className=\"App-header\">\n            <h1>Ne kadar verdin?</h1>\n          </header>\n          <Calculator />\n        </div>\n        <footer>\n          <a href=\"https://github.com/hypeserver/ne-kadar-verdin\" target=\"_blank\">Ne kadar verdin?</a> GitHub uzerinde barindirilan acik kaynakli bir projedir. Bilgilerinizin asla kaydedilmedigini kodu okuyarak gorebilirsiniz.\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}